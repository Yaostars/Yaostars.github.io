[{"content":"","date":null,"permalink":"/tags/linux/","section":"Tags","summary":"","title":"Linux"},{"content":"1. Basic Knowledge #Installation #Reference\nOS Basic Knowledge #I previously studied courses on CSKaoyan, but other tutorials are also available.\nRemote Link to Linux #Just need to install a FinalShell SSH Tool to complete remote link. (Installation Tutorial)\nWSL #As an auxiliary tool for Linux, WSL is very convenient in some situations.\nSnapshot #A snapshot is used to save the current state of your virtual machine as a backup.\nDirectory Structure #Linux has a file directory structure as shown in the following figure. The highest level directory is \u0026ldquo;/\u0026rdquo;. System defaults to the \u0026lsquo;home/\u0026rsquo; directory.\n2. Orders and Functions #Linux orders often looks like:\ncommand [-options] [parameter] ls #ls [-a -l -h] [path] -a: show all (including hidden) files and folders -h: make information easier to read (often used together with \u0026lsquo;-l\u0026rsquo;) -l: list detailed information about files and folders\rls -alh /\t# show detailed information neatly of all files and folders in root directory cd \u0026amp; pwd \u0026amp; mkdir #\rcd: enter to path directory pwd: show current work path mkdir: create a new folder\rcd bob pwd mkdir [bob/]new_folder touch \u0026amp; cat \u0026amp; more #\rtouch: create a new file cat: show the content of a file more: see the content of a file and support page turning\rtouch [bob/]test.txt cat [bob/]test.txt more [bob/]test.txt cp \u0026amp; rm \u0026amp; mv #cp [-r] old_file new_file\t# choose -r when copying a folder rm [-r -f] file1 file2...\t# -f means force delete, -r means deleting folders mv old_path new_path cp: copy a file or folder mv: move a file or folder to a new path rm: delete files or folders (use a \u0026lsquo;*\u0026rsquo; to achieve fuzzy matching)\r3. MySQL Project #As a passionate blogger, the choice of platform and theme is crucial in shaping the reader experience and managing content efficiently. After evaluating several platforms and themes, I settled on Hugo with the Congo theme. Here\u0026rsquo; s why:\nThe Power of Hugo: Speed and Flexibility Combined # Hugo: The World’s Fastest Framework for Building Websites\nHugo is renowned for its incredible speed and efficiency. As a static site generator, it compiles pages almost instantaneously, making it perfect for bloggers who value quick build times. Furthermore, Hugo’s flexibility in handling various content types effortlessly has allowed me to structure my blog without the complexities often found in dynamic CMS platforms.\nKey Features of Hugo:\nSpeed: Hugo generates pages at lightning-fast speeds. Customizability: Extensive themes and tools for customization. Security: Being static, Hugo reduces common security risks associated with dynamic websites. Why the Congo Theme? Tailwind CSS at its Core # Congo: A Powerful, Lightweight Theme for Hugo Built with Tailwind CSS\nChoosing the Congo theme was a straightforward decision once I understood the advantages of Tailwind CSS. Tailwind CSS version 3 offers an intuitive and powerful framework for designing unique and responsive layouts. Its utility-first approach means that almost any design is possible without leaving the comfort of your HTML.\nBenefits of the Congo Theme:\nResponsive Design: Adjusts beautifully across all devices. Customizable: Easy to modify with utility classes. Modern Aesthetics: Sleek and clean design that keeps the focus on content. Leveraging Markdown for Enhanced Content Creation #Markdown is a lightweight markup language that makes it simpler to write formatted text but with plain text. By using Markdown, I ensure that my writing process remains straightforward yet powerful. Hugo further enriches this by integrating Shortcodes—a way to embed richer content elements directly within Markdown.\nHugo Internal Shortcodes #Code Block Highlight # 1 2 3 4 5 6 7 8 9 10 \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;utf-8\u0026#34;\u0026gt; \u0026lt;title\u0026gt;Example HTML5 Document\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p\u0026gt;Test\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; Congo Shortcodes #In addition to all the default Hugo shortcodes, Congo adds a few extras for additional functionality.\nAlert #alert outputs its contents as a stylised message box within your article. It\u0026rsquo;s useful for drawing attention to important information that you don\u0026rsquo;t want the reader to miss.\nThe input is written in Markdown so you can format it however you please.\nBy default, the alert is presented with an exclaimation triangle icon. To change the icon, include the icon name in the shortcode. Check out the icon shortcode for more details on using icons.\nExample:\n{{\u0026lt; alert \u0026gt;}} **Warning!** This action is destructive! {{\u0026lt; /alert \u0026gt;}} {{\u0026lt; alert \u0026#34;twitter\u0026#34; \u0026gt;}} Don\u0026#39;t forget to [follow me](https://twitter.com/sylvanding) on Twitter. {{\u0026lt; /alert \u0026gt;}} Warning! This action is destructive!\rDon\u0026rsquo;t forget to follow me on Twitter.\rBadge #badge outputs a styled badge component which is useful for displaying metadata.\nExample:\n{{\u0026lt; badge \u0026gt;}} New article! {{\u0026lt; /badge \u0026gt;}} New article!\rButton #button outputs a styled button component which can be used to highlight a primary action. It has three optional parameters:\nParameter Description href The URL that the button should link to. target The target of the link. download Whether browser should download the resource rather than navigate to the URL. The value of this parameter will be the name of the downloaded file. Example:\n{{\u0026lt; button href=\u0026#34;#button\u0026#34; target=\u0026#34;_self\u0026#34; \u0026gt;}} Call to action {{\u0026lt; /button \u0026gt;}} Call to action\rFigure #Congo includes a figure shortcode for adding images to content. The shortcode replaces the base Hugo functionality in order to provide additional performance benefits.\nWhen a provided image is a page resource, it will be optimised using Hugo Pipes and scaled in order to provide images appropriate to different device resolutions. If a static asset or URL to an external image is provided, it will be included as-is without any image processing by Hugo.\nThe figure shortcode accepts six parameters:\nParameter Description src Required. The local path/filename or URL of the image. When providing a path and filename, the theme will attempt to locate the image using the following lookup order: Firstly, as a page resource bundled with the page; then an asset in the assets/ directory; then finally, a static image in the static/ directory. alt Alternative text description for the image. caption Markdown for the image caption, which will be displayed below the image. class Additional CSS classes to apply to the image. href URL that the image should be linked to. default Special parameter to revert to default Hugo figure behaviour. Simply provide default=true and then use normal Hugo shortcode syntax. Congo also supports automatic conversion of images included using standard Markdown syntax. Simply use the following format and the theme will handle the rest:\n![Alt text](image.jpg \u0026#34;Image caption\u0026#34;) Example:\n{{\u0026lt; figure src=\u0026#34;abstract.jpg\u0026#34; alt=\u0026#34;Abstract purple artwork\u0026#34; caption=\u0026#34;Photo by [Jr Korpa](https://unsplash.com/@jrkorpa) on [Unsplash](https://unsplash.com/)\u0026#34; \u0026gt;}} \u0026lt;!-- OR --\u0026gt; ![Abstract purple artwork](abstract.jpg \u0026#34;Photo by [Jr Korpa](https://unsplash.com/@jrkorpa) on [Unsplash](https://unsplash.com/)\u0026#34;) Photo by Jr Korpa on Unsplash\rChart #chart uses the Chart.js library to embed charts into articles using simple structured data. It supports a number of different chart styles and everything can be configured from within the shortcode. Simply provide the chart parameters between the shortcode tags and Chart.js will do the rest.\nRefer to the official Chart.js docs for details on syntax and supported chart types.\nExample:\n{{\u0026lt; chart \u0026gt;}} type: \u0026#39;bar\u0026#39;, data: { labels: [\u0026#39;Tomato\u0026#39;, \u0026#39;Blueberry\u0026#39;, \u0026#39;Banana\u0026#39;, \u0026#39;Lime\u0026#39;, \u0026#39;Orange\u0026#39;], datasets: [{ label: \u0026#39;# of votes\u0026#39;, data: [12, 19, 3, 5, 3], }] } {{\u0026lt; /chart \u0026gt;}} Icon #icon outputs an SVG icon and takes the icon name as its only parameter. The icon is scaled to match the current text size.\nExample:\n{{\u0026lt; icon \u0026#34;github\u0026#34; \u0026gt;}} Output: Icons are populated using Hugo pipelines which makes them very flexible. Congo includes a number of built-in icons for social, links and other purposes.\nCustom icons can be added by providing your own icon assets in the assets/icons/ directory of your project. The icon can then be referenced in the shortcode by using the SVG filename without the .svg extension.\nKatex #\rThe katex shortcode can be used to add mathematical expressions to article content using the KaTeX package. Refer to the online reference of supported TeX functions for the available syntax.\nTo include mathematical expressions in an article, simply place the shortcode anywhere with the content. It only needs to be included once per article and KaTeX will automatically render any markup on that page. Both inline and block notation are supported.\nInline notation can be generated by wrapping the expression in \\\\( and \\\\) delimiters. Alternatively, block notation can be generated using $$ delimiters.\nUse the online reference of supported TeX functions for the available syntax.\nInline notation #Inline notation can be generated by wrapping the expression in \\\\( and \\\\) delimiters.\nExample:\n% KaTeX inline notation Inline notation: \\\\(\\varphi = \\dfrac{1+\\sqrt5}{2}= 1.6180339887…\\\\) Inline notation: \\(\\varphi = \\dfrac{1+\\sqrt5}{2}= 1.6180339887…\\)\nBlock notation #Alternatively, block notation can be generated using $$ delimiters. This will output the expression in its own HTML block.\nExample:\n% KaTeX block notation $$ \\varphi = 1+\\frac{1} {1+\\frac{1} {1+\\frac{1} {1+\\cdots} } } $$ $$ \\varphi = 1+\\frac{1} {1+\\frac{1} {1+\\frac{1} {1+\\cdots} } } $$\nLead #lead is used to bring emphasis to the start of an article. It can be used to style an introduction, or to call out an important piece of information. Simply wrap any Markdown content in the lead shortcode.\nExample:\n{{\u0026lt; lead \u0026gt;}} When life gives you lemons, make lemonade. {{\u0026lt; /lead \u0026gt;}} When life gives you lemons, make lemonade.\rMermaid #mermaid allows you to draw detailed diagrams and visualisations using text. It uses Mermaid under the hood and supports a wide variety of diagrams, charts and other output formats.\nSimply write your Mermaid syntax within the mermaid shortcode and let the plugin do the rest.\nRefer to the official Mermaid docs for details on syntax and supported diagram types.\nExample:\n{{\u0026lt; mermaid \u0026gt;}} graph LR; A[Lemons]--\u0026gt;B[Lemonade]; B--\u0026gt;C[Profit] {{\u0026lt; /mermaid \u0026gt;}} graph LR;\rA[Lemons]--\u003eB[Lemonade];\rB--\u003eC[Profit]\rCustom Shortcodes #To create a shortcode, place an HTML template in the layouts/shortcodes directory of your source organization. Consider the file name carefully since the shortcode name will mirror that of the file but without the .html extension. For example, layouts/shortcodes/myshortcode.html will be called with {{\u0026lt; myshortcode \u0026gt;}}.\nMusic Block #Music Block shortcodes require APlayer and MetingJS. Place the downloaded js and css files in the assets/plugins directory:\n\u0026lt;!-- require APlayer --\u0026gt; \u0026lt;link rel=\u0026#34;stylesheet\u0026#34; href=\u0026#34;https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.css\u0026#34;\u0026gt; \u0026lt;script src=\u0026#34;https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;!-- require MetingJS --\u0026gt; \u0026lt;script src=\u0026#34;https://cdn.jsdelivr.net/npm/meting@2/dist/Meting.min.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; Then create a layouts/shortcodes/meting.html file:\n\u0026lt;meting-js server=\u0026#34;{{ .Get \u0026#34;server\u0026#34; }}\u0026#34; type=\u0026#34;{{ .Get \u0026#34;type\u0026#34; }}\u0026#34; id=\u0026#34;{{ .Get \u0026#34;id\u0026#34; }}\u0026#34;\u0026gt;\u0026lt;/meting-js\u0026gt; {{/* MetingJS@2.0.x */}} {{ if .Site.Params.MetingJS | default false }} \u0026lt;!-- require APlayer --\u0026gt; {{ with resources.Get \u0026#34;plugins/APlayer/APlayer.min.css\u0026#34; }} \u0026lt;link rel=\u0026#34;stylesheet\u0026#34; href=\u0026#34;{{ .RelPermalink }}\u0026#34; /\u0026gt; {{ end }} {{ with resources.Get \u0026#34;plugins/APlayer/APlayer.min.js\u0026#34; }} \u0026lt;script src=\u0026#34;{{ .RelPermalink }}\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; {{ end }} \u0026lt;!-- require MetingJS --\u0026gt; {{ with resources.Get \u0026#34;plugins/Meting/Meting.min.js\u0026#34; }} \u0026lt;script src=\u0026#34;{{ .RelPermalink }}\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; {{ end }} {{ end }} Example:\n{{\u0026lt; meting server=\u0026#34;netease\u0026#34; type=\u0026#34;song\u0026#34; id=\u0026#34;2124385868\u0026#34; \u0026gt;}} Conclusion #Thank you for visiting my new blog! I\u0026rsquo;m excited about the journey ahead and look forward to engaging with a community of tech enthusiasts and developers. Stay tuned for more posts where I\u0026rsquo;ll dive deeper into various technical topics, share development tips, and much more. Don’t forget to subscribe and join the conversation in the comments section below!\n","date":"24 July 2024","permalink":"/study/linux/","section":"Studies","summary":"By following \u003ca href=\"https://www.itheima.com/\" target=\"_blank\" rel=\"noreferrer\"\u003eItheima\u003c/a\u003e, I\u0026rsquo;m learning some knowledge and basic orders about Linux. This article is only used for me to recall knowledge. If there are something hard to understand, please forgive me.","title":"Linux Notes"},{"content":"","date":null,"permalink":"/study/","section":"Studies","summary":"","title":"Studies"},{"content":"","date":null,"permalink":"/tags/","section":"Tags","summary":"","title":"Tags"},{"content":"","date":null,"permalink":"/","section":"Ystars","summary":"","title":"Ystars"},{"content":"","date":null,"permalink":"/tags/blogging/","section":"Tags","summary":"","title":"Blogging"},{"content":"\rHello and welcome to my brand-new blog! I\u0026rsquo;m thrilled to have you here and excited to share the news of its launch. After a lot of planning and designing, I\u0026rsquo;ve finally rolled out this platform as a space to share my thoughts, experiences, and knowledge. ⭐\rQuick Start #Installation #Install Hugo #If you haven\u0026rsquo;t used Hugo before, you will need to install it onto your local machine. You can check if it\u0026rsquo;s already installed by running the command hugo version.\nMake sure you are using Hugo extended version 0.87.0 or later as the theme takes advantage of some of the latest Hugo features.\rYou can find detailed installation instructions for your platform in the Hugo docs.\nClone my repo #git clone --recurse-submodules https://github.com/sylvanding/sylvanding.github.io.git mywebsite Running server #cd mywebsite hugo serve -D Creating a new post #hugo new content posts/your-post-title.md 确保在发布内容前设置文章的Front Matter中的draft为false.\rDeployment #\rDeploying Hugo on Netlify can be a simple and efficient process, especially when integrating with GitHub for continuous deployment.\nBefore connecting to Netlify, ensure your site’s source code has been pushed to GitHub repo:\ngit push origin main Then Netlify tend to build the website automatically according to configuration file netlify.toml.\nThat’s it! Your Hugo blog is now live on Netlify. You can customize it with different themes, add plugins, and optimize your content as desired. Netlify also offers advanced features like custom domains, HTTPS, and continuous deployment, which make your blogging experience secure and efficient.\nIn summary: Never directly edit the theme files. Only make customisations in your Hugo project’s sub-directories, not in the themes directory itself.\rCongo is built to take advantage of all the standard Hugo practices. It is designed to allow all aspects of the theme to be customised and overridden without changing any of the core theme files. This allows for a seamless upgrade experience while giving you total control over the look and feel of your website.\nIn order to achieve this, you should never manually adjust any of the theme files directly. Whether you install using Hugo modules, as a git submodule or manually include the theme in your themes/ directory, you should always leave these files intact.\nThe correct way to adjust any theme behaviour is by overriding files using Hugo\u0026rsquo;s powerful file lookup order. In summary, the lookup order ensures any files you include in your project directory will automatically take precedence over any theme files.\nFor example, if you wanted to override the main article template in Congo, you can simply create your own layouts/_default/single.html file and place it in the root of your project. This file will then override the single.html from the theme without ever changing the theme itself. This works for any theme files - HTML templates, partials, shortcodes, config files, data, assets, etc.\nAs long as you follow this simple practice, you will always be able to update the theme (or test different theme versions) without worrying that you will lose any of your custom changes.\nUpdating Congo #Git submodules can be updated using the git command. Simply execute the following command and the latest version of the theme will be downloaded into your local repository:\ngit submodule update --remote --merge Once the submodule has been updated, rebuild your site and check everything works as expected.\nConclusion #Thank you for visiting my new blog! I\u0026rsquo;m excited about the journey ahead and look forward to engaging with a community of tech enthusiasts and developers. Stay tuned for more posts where I\u0026rsquo;ll dive deeper into various technical topics, share development tips, and much more. Don’t forget to subscribe and join the conversation in the comments section below!\n","date":"28 May 2024","permalink":"/research/setup-guides/","section":"Researches","summary":"Learn how to start a blog from scratch with this step-by-step guide on running, configuring, and deploying Hugo blogging platform.","title":"How to Launch the Blog: Running, Configuration, and Deployment Guide"},{"content":"","date":null,"permalink":"/research/","section":"Researches","summary":"","title":"Researches"},{"content":"","date":null,"permalink":"/tags/setup-guides/","section":"Tags","summary":"","title":"Setup-Guides"},{"content":"","date":null,"permalink":"/tags/congo/","section":"Tags","summary":"","title":"Congo"},{"content":"","date":null,"permalink":"/tags/hugo/","section":"Tags","summary":"","title":"Hugo"},{"content":"","date":null,"permalink":"/tags/markdown/","section":"Tags","summary":"","title":"Markdown"},{"content":"","date":null,"permalink":"/tags/shortcodes/","section":"Tags","summary":"","title":"Shortcodes"},{"content":"\rHello and welcome to my brand-new blog! I\u0026rsquo;m thrilled to have you here and excited to share the news of its launch. After a lot of planning and designing, I\u0026rsquo;ve finally rolled out this platform as a space to share my thoughts, experiences, and knowledge.\rWhy I Chose Hugo and the Congo Theme #As a passionate blogger, the choice of platform and theme is crucial in shaping the reader experience and managing content efficiently. After evaluating several platforms and themes, I settled on Hugo with the Congo theme. Here’s why:\nThe Power of Hugo: Speed and Flexibility Combined # Hugo: The World’s Fastest Framework for Building Websites\nHugo is renowned for its incredible speed and efficiency. As a static site generator, it compiles pages almost instantaneously, making it perfect for bloggers who value quick build times. Furthermore, Hugo’s flexibility in handling various content types effortlessly has allowed me to structure my blog without the complexities often found in dynamic CMS platforms.\nKey Features of Hugo:\nSpeed: Hugo generates pages at lightning-fast speeds. Customizability: Extensive themes and tools for customization. Security: Being static, Hugo reduces common security risks associated with dynamic websites. Why the Congo Theme? Tailwind CSS at its Core # Congo: A Powerful, Lightweight Theme for Hugo Built with Tailwind CSS\nChoosing the Congo theme was a straightforward decision once I understood the advantages of Tailwind CSS. Tailwind CSS version 3 offers an intuitive and powerful framework for designing unique and responsive layouts. Its utility-first approach means that almost any design is possible without leaving the comfort of your HTML.\nBenefits of the Congo Theme:\nResponsive Design: Adjusts beautifully across all devices. Customizable: Easy to modify with utility classes. Modern Aesthetics: Sleek and clean design that keeps the focus on content. Leveraging Markdown for Enhanced Content Creation #Markdown is a lightweight markup language that makes it simpler to write formatted text but with plain text. By using Markdown, I ensure that my writing process remains straightforward yet powerful. Hugo further enriches this by integrating Shortcodes—a way to embed richer content elements directly within Markdown.\nHugo Internal Shortcodes #Code Block Highlight # 1 2 3 4 5 6 7 8 9 10 \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;utf-8\u0026#34;\u0026gt; \u0026lt;title\u0026gt;Example HTML5 Document\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p\u0026gt;Test\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; Congo Shortcodes #In addition to all the default Hugo shortcodes, Congo adds a few extras for additional functionality.\nAlert #alert outputs its contents as a stylised message box within your article. It\u0026rsquo;s useful for drawing attention to important information that you don\u0026rsquo;t want the reader to miss.\nThe input is written in Markdown so you can format it however you please.\nBy default, the alert is presented with an exclaimation triangle icon. To change the icon, include the icon name in the shortcode. Check out the icon shortcode for more details on using icons.\nExample:\n{{\u0026lt; alert \u0026gt;}} **Warning!** This action is destructive! {{\u0026lt; /alert \u0026gt;}} {{\u0026lt; alert \u0026#34;twitter\u0026#34; \u0026gt;}} Don\u0026#39;t forget to [follow me](https://twitter.com/sylvanding) on Twitter. {{\u0026lt; /alert \u0026gt;}} Warning! This action is destructive!\rDon\u0026rsquo;t forget to follow me on Twitter.\rBadge #badge outputs a styled badge component which is useful for displaying metadata.\nExample:\n{{\u0026lt; badge \u0026gt;}} New article! {{\u0026lt; /badge \u0026gt;}} New article!\rButton #button outputs a styled button component which can be used to highlight a primary action. It has three optional parameters:\nParameter Description href The URL that the button should link to. target The target of the link. download Whether browser should download the resource rather than navigate to the URL. The value of this parameter will be the name of the downloaded file. Example:\n{{\u0026lt; button href=\u0026#34;#button\u0026#34; target=\u0026#34;_self\u0026#34; \u0026gt;}} Call to action {{\u0026lt; /button \u0026gt;}} Call to action\rFigure #Congo includes a figure shortcode for adding images to content. The shortcode replaces the base Hugo functionality in order to provide additional performance benefits.\nWhen a provided image is a page resource, it will be optimised using Hugo Pipes and scaled in order to provide images appropriate to different device resolutions. If a static asset or URL to an external image is provided, it will be included as-is without any image processing by Hugo.\nThe figure shortcode accepts six parameters:\nParameter Description src Required. The local path/filename or URL of the image. When providing a path and filename, the theme will attempt to locate the image using the following lookup order: Firstly, as a page resource bundled with the page; then an asset in the assets/ directory; then finally, a static image in the static/ directory. alt Alternative text description for the image. caption Markdown for the image caption, which will be displayed below the image. class Additional CSS classes to apply to the image. href URL that the image should be linked to. default Special parameter to revert to default Hugo figure behaviour. Simply provide default=true and then use normal Hugo shortcode syntax. Congo also supports automatic conversion of images included using standard Markdown syntax. Simply use the following format and the theme will handle the rest:\n![Alt text](image.jpg \u0026#34;Image caption\u0026#34;) Example:\n{{\u0026lt; figure src=\u0026#34;abstract.jpg\u0026#34; alt=\u0026#34;Abstract purple artwork\u0026#34; caption=\u0026#34;Photo by [Jr Korpa](https://unsplash.com/@jrkorpa) on [Unsplash](https://unsplash.com/)\u0026#34; \u0026gt;}} \u0026lt;!-- OR --\u0026gt; ![Abstract purple artwork](abstract.jpg \u0026#34;Photo by [Jr Korpa](https://unsplash.com/@jrkorpa) on [Unsplash](https://unsplash.com/)\u0026#34;) Photo by Jr Korpa on Unsplash\rChart #chart uses the Chart.js library to embed charts into articles using simple structured data. It supports a number of different chart styles and everything can be configured from within the shortcode. Simply provide the chart parameters between the shortcode tags and Chart.js will do the rest.\nRefer to the official Chart.js docs for details on syntax and supported chart types.\nExample:\n{{\u0026lt; chart \u0026gt;}} type: \u0026#39;bar\u0026#39;, data: { labels: [\u0026#39;Tomato\u0026#39;, \u0026#39;Blueberry\u0026#39;, \u0026#39;Banana\u0026#39;, \u0026#39;Lime\u0026#39;, \u0026#39;Orange\u0026#39;], datasets: [{ label: \u0026#39;# of votes\u0026#39;, data: [12, 19, 3, 5, 3], }] } {{\u0026lt; /chart \u0026gt;}} Icon #icon outputs an SVG icon and takes the icon name as its only parameter. The icon is scaled to match the current text size.\nExample:\n{{\u0026lt; icon \u0026#34;github\u0026#34; \u0026gt;}} Output: Icons are populated using Hugo pipelines which makes them very flexible. Congo includes a number of built-in icons for social, links and other purposes.\nCustom icons can be added by providing your own icon assets in the assets/icons/ directory of your project. The icon can then be referenced in the shortcode by using the SVG filename without the .svg extension.\nKatex #\rThe katex shortcode can be used to add mathematical expressions to article content using the KaTeX package. Refer to the online reference of supported TeX functions for the available syntax.\nTo include mathematical expressions in an article, simply place the shortcode anywhere with the content. It only needs to be included once per article and KaTeX will automatically render any markup on that page. Both inline and block notation are supported.\nInline notation can be generated by wrapping the expression in \\\\( and \\\\) delimiters. Alternatively, block notation can be generated using $$ delimiters.\nUse the online reference of supported TeX functions for the available syntax.\nInline notation #Inline notation can be generated by wrapping the expression in \\\\( and \\\\) delimiters.\nExample:\n% KaTeX inline notation Inline notation: \\\\(\\varphi = \\dfrac{1+\\sqrt5}{2}= 1.6180339887…\\\\) Inline notation: \\(\\varphi = \\dfrac{1+\\sqrt5}{2}= 1.6180339887…\\)\nBlock notation #Alternatively, block notation can be generated using $$ delimiters. This will output the expression in its own HTML block.\nExample:\n% KaTeX block notation $$ \\varphi = 1+\\frac{1} {1+\\frac{1} {1+\\frac{1} {1+\\cdots} } } $$ $$ \\varphi = 1+\\frac{1} {1+\\frac{1} {1+\\frac{1} {1+\\cdots} } } $$\nLead #lead is used to bring emphasis to the start of an article. It can be used to style an introduction, or to call out an important piece of information. Simply wrap any Markdown content in the lead shortcode.\nExample:\n{{\u0026lt; lead \u0026gt;}} When life gives you lemons, make lemonade. {{\u0026lt; /lead \u0026gt;}} When life gives you lemons, make lemonade.\rMermaid #mermaid allows you to draw detailed diagrams and visualisations using text. It uses Mermaid under the hood and supports a wide variety of diagrams, charts and other output formats.\nSimply write your Mermaid syntax within the mermaid shortcode and let the plugin do the rest.\nRefer to the official Mermaid docs for details on syntax and supported diagram types.\nExample:\n{{\u0026lt; mermaid \u0026gt;}} graph LR; A[Lemons]--\u0026gt;B[Lemonade]; B--\u0026gt;C[Profit] {{\u0026lt; /mermaid \u0026gt;}} graph LR;\rA[Lemons]--\u003eB[Lemonade];\rB--\u003eC[Profit]\rCustom Shortcodes #To create a shortcode, place an HTML template in the layouts/shortcodes directory of your source organization. Consider the file name carefully since the shortcode name will mirror that of the file but without the .html extension. For example, layouts/shortcodes/myshortcode.html will be called with {{\u0026lt; myshortcode \u0026gt;}}.\nMusic Block #Music Block shortcodes require APlayer and MetingJS. Place the downloaded js and css files in the assets/plugins directory:\n\u0026lt;!-- require APlayer --\u0026gt; \u0026lt;link rel=\u0026#34;stylesheet\u0026#34; href=\u0026#34;https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.css\u0026#34;\u0026gt; \u0026lt;script src=\u0026#34;https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;!-- require MetingJS --\u0026gt; \u0026lt;script src=\u0026#34;https://cdn.jsdelivr.net/npm/meting@2/dist/Meting.min.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; Then create a layouts/shortcodes/meting.html file:\n\u0026lt;meting-js server=\u0026#34;{{ .Get \u0026#34;server\u0026#34; }}\u0026#34; type=\u0026#34;{{ .Get \u0026#34;type\u0026#34; }}\u0026#34; id=\u0026#34;{{ .Get \u0026#34;id\u0026#34; }}\u0026#34;\u0026gt;\u0026lt;/meting-js\u0026gt; {{/* MetingJS@2.0.x */}} {{ if .Site.Params.MetingJS | default false }} \u0026lt;!-- require APlayer --\u0026gt; {{ with resources.Get \u0026#34;plugins/APlayer/APlayer.min.css\u0026#34; }} \u0026lt;link rel=\u0026#34;stylesheet\u0026#34; href=\u0026#34;{{ .RelPermalink }}\u0026#34; /\u0026gt; {{ end }} {{ with resources.Get \u0026#34;plugins/APlayer/APlayer.min.js\u0026#34; }} \u0026lt;script src=\u0026#34;{{ .RelPermalink }}\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; {{ end }} \u0026lt;!-- require MetingJS --\u0026gt; {{ with resources.Get \u0026#34;plugins/Meting/Meting.min.js\u0026#34; }} \u0026lt;script src=\u0026#34;{{ .RelPermalink }}\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; {{ end }} {{ end }} Example:\n{{\u0026lt; meting server=\u0026#34;netease\u0026#34; type=\u0026#34;song\u0026#34; id=\u0026#34;2124385868\u0026#34; \u0026gt;}} Conclusion #Thank you for visiting my new blog! I\u0026rsquo;m excited about the journey ahead and look forward to engaging with a community of tech enthusiasts and developers. Stay tuned for more posts where I\u0026rsquo;ll dive deeper into various technical topics, share development tips, and much more. Don’t forget to subscribe and join the conversation in the comments section below!\n","date":"28 May 2024","permalink":"/research/features/","section":"Researches","summary":"Explore the unique features of my blog powered by Hugo, the benefits of the Congo theme based on Tailwind CSS 3, and the versatility of Markdown functionalities, including Hugo\u0026rsquo;s shortcodes.","title":"Welcome to My New Blog: Powered by Hugo and Styled with Congo"},{"content":"I\u0026rsquo;m an Mphil student in HKUST(GZ) now, majoring in Artificial Intelligence. Prior to this, I pursued a Bachelor\u0026rsquo;s degree in Agriculture at Zhejiang University.\nI have worked on some projects related to agricultural robots and insect image recognition during my undergraduate studies, which sparked my interest in artificial intelligence. As I switched to a new profession, I am still a novice🤡 in coding and professional skills.\nI will periodically update my life🏃‍♂️, study📖, and research🖥️ related in this blog. You can point my fault if you want and have a pleasant discussion.👋🤣\n","date":null,"permalink":"/about/","section":"About","summary":"I\u0026rsquo;m an Mphil student in HKUST(GZ) now, majoring in Artificial Intelligence.","title":"About"},{"content":"","date":null,"permalink":"/categories/","section":"Categories","summary":"","title":"Categories"},{"content":"\rThis is the Life section of my blog! 🚀 It will be used to share some interesting things around me. You can say whatever you want in comments section or if you also have some fun experience, welcome you to share it in comments section. ⭐\rNever forget to keep a happy mood every day! 😄 #","date":null,"permalink":"/life/","section":"Life","summary":"This is the Life section of my blog!","title":"Life"}]